// Generated by CoffeeScript 1.6.3
(function() {
  var Branch, Promise, adapter, iou, isFunction, isThenable,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  isFunction = function(x) {
    return typeof x === "function";
  };

  isThenable = function(x) {
    return isFunction(x != null ? x.then : void 0);
  };

  Branch = (function() {
    function Branch(onFulfilled, onRejected) {
      this.onFulfilled = onFulfilled;
      this.onRejected = onRejected;
      this.then = __bind(this.then, this);
    }

    Branch.prototype.fulfill = function(value) {
      var nextValue, reason, _ref, _ref1;
      nextValue = value;
      if (isFunction(this.onFulfilled)) {
        try {
          nextValue = this.onFulfilled(value);
        } catch (_error) {
          reason = _error;
          return (_ref = this.promise) != null ? _ref.reject(reason) : void 0;
        }
      }
      return (_ref1 = this.promise) != null ? _ref1.resolve(nextValue) : void 0;
    };

    Branch.prototype.reject = function(reason) {
      var nextReason, nextValue, _ref, _ref1, _ref2;
      nextValue = void 0;
      if (isFunction(this.onRejected)) {
        try {
          nextValue = this.onRejected(reason);
        } catch (_error) {
          nextReason = _error;
          return (_ref = this.promise) != null ? _ref.reject(nextReason) : void 0;
        }
        return (_ref1 = this.promise) != null ? _ref1.resolve(nextValue) : void 0;
      } else {
        return (_ref2 = this.promise) != null ? _ref2.reject(reason) : void 0;
      }
    };

    Branch.prototype.then = function() {
      if (this.promise == null) {
        this.promise = new Promise();
      }
      return this.promise.then.apply(this.promise, arguments);
    };

    return Branch;

  })();

  Promise = (function() {
    function Promise() {
      this.then = __bind(this.then, this);
      this.reject = __bind(this.reject, this);
      this.fulfill = __bind(this.fulfill, this);
      this.resolve = __bind(this.resolve, this);
      this.branches = [];
      this.state = 'pending';
    }

    Promise.prototype.resolve = function(x) {
      if (isThenable(x)) {
        return x.then(this.resolve, this.reject);
      } else {
        return this.fulfill(x);
      }
    };

    Promise.prototype.fulfill = function(value) {
      var _this = this;
      if (this.state === 'pending') {
        this.value = value;
        this.state = 'fulfilled';
        return setTimeout(function() {
          var branch, _i, _len, _ref, _results;
          _ref = _this.branches;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            branch = _ref[_i];
            _results.push(branch.fulfill(value));
          }
          return _results;
        });
      }
    };

    Promise.prototype.reject = function(reason) {
      var _this = this;
      if (this.state === 'pending') {
        this.state = 'rejected';
        this.reason = reason;
        return setTimeout(function() {
          var branch, _i, _len, _ref, _results;
          _ref = _this.branches;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            branch = _ref[_i];
            _results.push(branch.reject(reason));
          }
          return _results;
        });
      }
    };

    Promise.prototype.then = function(onFulfilled, onRejected) {
      var branch,
        _this = this;
      branch = new Branch(onFulfilled, onRejected);
      if (this.state === 'fulfilled') {
        setTimeout(function() {
          return branch.fulfill(_this.value);
        });
      } else if (this.state === 'rejected') {
        setTimeout(function() {
          return branch.reject(_this.reason);
        });
      } else {
        this.branches.push(branch);
      }
      return {
        then: branch.then
      };
    };

    return Promise;

  })();

  iou = function(asyncFunction) {
    var promise;
    promise = new Promise();
    asyncFunction(promise.resolve, promise.reject);
    return {
      then: promise.then
    };
  };

  adapter = {
    fulfilled: function(value) {
      return iou(function(resolve) {
        return resolve(value);
      });
    },
    rejected: function(error) {
      return iou(function(resolve, reject) {
        return reject(error);
      });
    },
    pending: function() {
      var pending;
      pending = {};
      pending.promise = iou(function(resolve, reject) {
        pending.fulfill = resolve;
        return pending.reject = reject;
      });
      return pending;
    }
  };

  module.exports = global.adapter = adapter;

}).call(this);
